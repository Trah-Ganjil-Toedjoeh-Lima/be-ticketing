name: Docker Image CI Production

on:
  push:
    branches:
    - master
    - main

jobs:
  build-prod:
    runs-on: self-hosted

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag trahganjil/gmco-ticketing-be:$(git rev-parse --short HEAD)
    - name: Push to DockerHub
      run: docker login -u ${{ secrets.DH_USER }} -p ${{ secrets.DH_PASS }} && docker push trahganjil/gmco-ticketing-be:$(git rev-parse --short HEAD)

  deploy-prod:
    runs-on: self-hosted
    needs: build-prod
    steps:
    - name: Run Docker Container
      run: export DOCKER_TAG=$(git rev-parse --short HEAD) && cp ~/projects/vault/.env.production .env && docker compose -f docker-compose.prod.yml up -d

  test-prod:
    runs-on: ubuntu-latest
    needs: deploy-prod
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # INstall Node on the runner
      - name: Install Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      # Install the newman command line utility and also install the html extra reporter
      - name: Install newman
        run: |
          npm install -g newman
          npm install -g newman-reporter-htmlextra

      # Make directory to upload the test results
      - name: Make Directory for results
        run: mkdir -p testResults

      # Run the POSTMAN collection
      - name: Run POSTMAN collection
        run: newman run GMCO-V1-TEST-RESPONSE.postman_collection.json -r htmlextra --reporter-htmlextra-export testResults/htmlreport.html

      # Upload the contents of Test Results directory to workspace
      - name: Output the run Details
        uses: actions/upload-artifact@v2
        with:
          name: RunReports
          path: testResults